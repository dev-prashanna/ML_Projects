#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>
#include <DHT.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <TinyGPSPlus.h>

// -------------------- CONFIG ----------------------
const char* ssid = "Prakash 2g";
const char* password = "P1rakash@*#1";

// Pins
#define TRIG_PIN 33
#define ECHO_PIN 25
#define BUZZER_PIN 13
#define DHTPIN 4
#define DHTTYPE DHT11
#define LDR_PIN 35
#define MQ2_PIN 34

// Objects
WebServer server(80);
DHT dht(DHTPIN, DHTTYPE);
Adafruit_MPU6050 mpu;
HardwareSerial SerialGPS(1);
TinyGPSPlus gps;

// Morse variables
bool morseActive = false;
unsigned long lastMorseTime = 0;
int morseIndex = 0;
const char* morseMessage = "... --- ...";  // SOS
bool morseBuzzing = false;
unsigned long morseBuzzStart = 0;

// -------------------- FUNCTIONS ----------------------

// Ultrasonic Distance
long getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  long distance = duration * 0.034 / 2;
  return distance > 0 ? distance : 0;
}

// Handle Morse code in non-blocking way
void handleMorse() {
  if (!morseActive) {
    morseIndex = 0;
    digitalWrite(BUZZER_PIN, LOW);
    morseBuzzing = false;
    return;
  }

  unsigned long now = millis();

  if (!morseBuzzing && morseMessage[morseIndex] != '\0') {
    char symbol = morseMessage[morseIndex];
    if (symbol == '.') {
      digitalWrite(BUZZER_PIN, HIGH);
      morseBuzzStart = now;
      morseBuzzing = true;
    } else if (symbol == '-') {
      digitalWrite(BUZZER_PIN, HIGH);
      morseBuzzStart = now;
      morseBuzzing = true;
    } else if (symbol == ' ') {
      // pause
      morseIndex++;
    }
  } else if (morseBuzzing) {
    char symbol = morseMessage[morseIndex];
    unsigned long duration = (symbol == '.') ? 200 : 600;
    if (now - morseBuzzStart >= duration) {
      digitalWrite(BUZZER_PIN, LOW);
      morseBuzzing = false;
      morseIndex++;
      if (morseMessage[morseIndex] == '\0') {
        // Restart after full message
        morseIndex = 0;
        morseActive = false;  // Disable after one SOS
      }
    }
  }
}

// -------------------- SERVER HANDLERS ----------------------

void handleSensorData() {
  // Read sensors
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  int ldrValue = analogRead(LDR_PIN);
  int mq2Value = analogRead(MQ2_PIN);
  long distance = getDistance();

  // Buzzer alert if obstacle < 5cm (only if Morse is OFF)
  if (!morseActive) {
    if (distance < 5 && distance > 0) {
      digitalWrite(BUZZER_PIN, HIGH);
    } else if (!morseBuzzing) {
      digitalWrite(BUZZER_PIN, LOW);
    }
  }

  // MPU6050 (pitch/roll/yaw)
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  float pitch = atan2(a.acceleration.y, a.acceleration.z) * 180 / PI;
  float roll = atan2(-a.acceleration.x, a.acceleration.z) * 180 / PI;
  float yaw = atan2(a.acceleration.x, a.acceleration.y) * 180 / PI;

  // GPS Data
  double latitude = gps.location.isValid() ? gps.location.lat() : 0.0;
  double longitude = gps.location.isValid() ? gps.location.lng() : 0.0;

  // Build JSON
  StaticJsonDocument<512> doc;
  doc["temperature"] = isnan(temperature) ? 0 : temperature;
  doc["humidity"] = isnan(humidity) ? 0 : humidity;
  doc["ldrValue"] = ldrValue;
  doc["mq2Value"] = mq2Value;
  doc["moisture"] = 0; // Placeholder
  doc["distance"] = distance;
  doc["latitude"] = latitude;
  doc["longitude"] = longitude;
  doc["pitch"] = pitch;
  doc["roll"] = roll;
  doc["yaw"] = yaw;

  String json;
  serializeJson(doc, json);
  server.send(200, "application/json", json);
}

void handleToggleMorse() {
  morseActive = !morseActive;
  morseIndex = 0;

  String json = "{\"state\":";
  json += (morseActive ? "true" : "false");
  json += "}";
  server.send(200, "application/json", json);
}

void handleRoot() {
  // Serve your HTML page
  String htmlPage = R"rawliteral(
  <!DOCTYPE html>
  <html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NATERIDA</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Courier New', monospace;
            background-color: #000;
            background-image: linear-gradient(to right, rgba(255, 0, 0, 0.2), rgba(0, 255, 0, 0.2), rgba(0, 0, 255, 0.2));
            background-size: 200% 200%;
            animation: gradientAnimation 8s ease infinite;
            color: #fff;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            height: 100vh;
            overflow-y: auto;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.8);
        }
        @keyframes gradientAnimation { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } }
        h1 { font-size: 3em; animation: flicker 1s infinite; color: #00ff00; }
        @keyframes flicker { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }
        .sensor-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        .sensor-table th, .sensor-table td { border: 2px solid #00ff00; padding: 10px; text-align: center; background-color: rgba(0, 255, 0, 0.2); }
        .button { margin: 10px; padding: 10px 20px; border: 2px solid #00ff00; background: #000; color: #00ff00; cursor: pointer; border-radius: 12px; }
        #cube { width: 80px; height: 80px; background: rgba(255, 165, 0, 0.7); transform-style: preserve-3d; margin: 10px; }
        .face { position: absolute; width: 80px; height: 80px; background: rgba(255, 0, 0, 0.7); border: 1px solid #fff; }
        .front { transform: translateZ(40px); } .back { transform: rotateY(180deg) translateZ(40px); }
        .left { transform: rotateY(-90deg) translateZ(40px); } .right { transform: rotateY(90deg) translateZ(40px); }
        .top { transform: rotateX(90deg) translateZ(40px); } .bottom { transform: rotateX(-90deg) translateZ(40px); }
    </style>
    <script>
    let morseState = false;

    function toggleMorse() {
        fetch('/toggleMorse')
            .then(response => response.json())
            .then(data => {
                morseState = data.state;
                document.getElementById('morseBtn').innerText = morseState ? "Morse OFF" : "Morse ON";
            });
    }

    setInterval(function() {
        fetch('/getSensorData')
            .then(response => response.json())
            .then(data => {
                document.getElementById('temp').innerText = data.temperature.toFixed(1);
                document.getElementById('humidity').innerText = data.humidity.toFixed(1);
                document.getElementById('ldr').innerText = data.ldrValue;
                document.getElementById('mq2').innerText = data.mq2Value;
                document.getElementById('moist').innerText = data.moisture;
                document.getElementById('dist').innerText = data.distance;
                document.getElementById('lati').innerText = data.latitude;
                document.getElementById('longi').innerText = data.longitude;
                document.getElementById('pitch').innerText = data.pitch.toFixed(1);
                document.getElementById('roll').innerText = data.roll.toFixed(1);
                document.getElementById('yaw').innerText = data.yaw.toFixed(1);

                updateCube(data.pitch, data.roll, data.yaw);
            });
    }, 1000);

    function updateCube(pitch, roll, yaw) {
        document.getElementById('cube').style.transform =
            'rotateX(' + pitch + 'deg) rotateY(' + roll + 'deg) rotateZ(' + yaw + 'deg)';
    }
    </script>
  </head>
  <body>
    <h1>NATERIDA</h1>
    <table class='sensor-table'>
      <tr><th>Temp</th><th>Humidity</th></tr>
      <tr><td><span id='temp'>0</span> 째C</td><td><span id='humidity'>0</span> %</td></tr>
      <tr><th>LDR</th><th>MQ2</th></tr>
      <tr><td><span id='ldr'>0</span></td><td><span id='mq2'>0</span></td></tr>
      <tr><th>Moisture</th><th>Distance</th></tr>
      <tr><td><span id='moist'>0</span></td><td><span id='dist'>0</span></td></tr>
      <tr><th>Lat</th><th>Long</th></tr>
      <tr><td><span id='lati'>0</span></td><td><span id='longi'>0</span></td></tr>
    </table>
    <button class="button" id="morseBtn" onclick="toggleMorse()">Morse ON</button>
    <div id='cube'>
      <div class='face front'></div><div class='face back'></div>
      <div class='face left'></div><div class='face right'></div>
      <div class='face top'></div><div class='face bottom'></div>
    </div>
    <p>Pitch: <span id='pitch'>0</span>째 Roll: <span id='roll'>0</span>째 Yaw: <span id='yaw'>0</span>째</p>
  </body>
  </html>
  )rawliteral";

  server.send(200, "text/html", htmlPage);
}

// -------------------- SETUP ----------------------

void setup() {
  Serial.begin(115200);
  SerialGPS.begin(9600, SERIAL_8N1, 16, 17); // GPS RX=16, TX=17

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  dht.begin();
  Wire.begin(18, 5);
  if (!mpu.begin()) {
    Serial.println("MPU6050 not found!");
  }

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected. IP: " + WiFi.localIP().toString());

  server.on("/", handleRoot);
  server.on("/getSensorData", handleSensorData);
  server.on("/toggleMorse", handleToggleMorse);

  server.begin();
  Serial.println("WebServer started!");
}

// -------------------- LOOP ----------------------

void loop() {
  server.handleClient();

  // GPS feed
  while (SerialGPS.available()) {
    gps.encode(SerialGPS.read());
  }

  // Handle Morse without blocking
  handleMorse();
}
